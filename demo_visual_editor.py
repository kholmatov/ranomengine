#!/usr/bin/env python3
"""
RanomMappingStudio Visual Editor Demo

Demonstrates the complete Visual DOM-to-Goal Mapping Editor including:
- Interactive HTML interface with three-panel layout
- Real-time DOM element selection and mapping
- AI-powered selector suggestions
- Live preview and comparison with AI results
- Schema save/export functionality
"""

import webbrowser
import time
import subprocess
import sys
from pathlib import Path

def print_section(title: str, char: str = "="):
    """Print a formatted section header"""
    print(f"\n{char * 60}")
    print(f"üé® {title}")
    print(f"{char * 60}")

def check_system_requirements():
    """Check if system requirements are met"""
    print_section("System Requirements Check")
    
    # Check Python environment
    try:
        import fastapi
        import uvicorn
        print("‚úÖ FastAPI and Uvicorn installed")
    except ImportError:
        print("‚ùå FastAPI/Uvicorn missing - run: pip install -r requirements.txt")
        return False
    
    # Check if virtual environment is active
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ Virtual environment is active")
    else:
        print("‚ö†Ô∏è  Virtual environment not detected - consider activating: source venv/bin/activate")
    
    # Check for required files
    required_files = [
        "api.py",
        "mappingstudio/api/endpoints.py", 
        "mappingstudio/ui/editor.html",
        "mappingstudio/services/ai_suggester.py"
    ]
    
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path} exists")
        else:
            print(f"‚ùå {file_path} missing")
            return False
    
    return True

def start_api_server():
    """Start the API server in the background"""
    print_section("Starting API Server")
    
    try:
        # Start uvicorn server
        print("üöÄ Starting RanomEngine API server with Visual Editor...")
        print("   Server will be available at: http://localhost:8000")
        print("   Visual Editor at: http://localhost:8000/mappingstudio/editor")
        print("   API Documentation: http://localhost:8000/docs")
        print()
        print("   Press Ctrl+C to stop the server when done")
        print()
        
        # Run the server (this will block)
        subprocess.run([
            sys.executable, "-m", "uvicorn", 
            "api:app", 
            "--host", "0.0.0.0", 
            "--port", "8000",
            "--reload"
        ])
        
    except KeyboardInterrupt:
        print("\n‚õî Server stopped by user")
    except Exception as e:
        print(f"‚ùå Failed to start server: {e}")
        return False
    
    return True

def show_usage_instructions():
    """Show detailed usage instructions"""
    print_section("Visual Editor Usage Guide", "üéØ")
    
    print("""
üé® RanomMappingStudio Visual Editor - Complete Guide:

üìã GETTING STARTED:
   1. The server will start automatically
   2. Your browser will open to the Visual Editor
   3. Enter a car listing URL (e.g., Cars.com URL)
   4. Click "Load Page" to preview the website

üñ±Ô∏è  MAPPING WORKFLOW:
   1. LEFT PANEL - Field Mapper:
      ‚Ä¢ Shows all goal.json fields (VIN, price, year, etc.)
      ‚Ä¢ Each field has description and type information
      ‚Ä¢ Input box for CSS selector or XPath

   2. CENTER PANEL - Website Preview:
      ‚Ä¢ Live iframe showing the target website
      ‚Ä¢ Click elements to capture selectors (when in picking mode)
      ‚Ä¢ Real-time visual feedback

   3. RIGHT PANEL - Output Preview:
      ‚Ä¢ Live goal.json preview
      ‚Ä¢ Statistics (fields mapped, confidence score)
      ‚Ä¢ AI comparison results

üéØ MAPPING METHODS:
   
   Method 1: Manual Selection
   ‚Ä¢ Click "Pick from page" next to any field
   ‚Ä¢ Click on the corresponding element in the webpage
   ‚Ä¢ Selector is automatically generated and applied
   
   Method 2: AI Suggestions
   ‚Ä¢ Click "AI Suggest" for intelligent recommendations
   ‚Ä¢ AI analyzes the page and suggests optimal selectors
   ‚Ä¢ Click "Get AI Suggestions" for all fields at once
   
   Method 3: Manual Entry
   ‚Ä¢ Type CSS selectors or XPath directly into input boxes
   ‚Ä¢ Supports complex selectors and nested elements

üß™ TESTING & VALIDATION:
   ‚Ä¢ "Test Mapping" - Preview extracted goal.json
   ‚Ä¢ "Compare with AI" - Side-by-side accuracy comparison
   ‚Ä¢ Real-time field validation and error reporting
   ‚Ä¢ Confidence scores and success indicators

üíæ SAVING & EXPORT:
   ‚Ä¢ "Save Schema" - Store mapping for reuse
   ‚Ä¢ Version control and metadata tracking
   ‚Ä¢ Export for use in production systems

‚ö° PRO TIPS:
   ‚Ä¢ Start with AI suggestions, then refine manually
   ‚Ä¢ Use specific selectors for better accuracy
   ‚Ä¢ Test your mapping before saving
   ‚Ä¢ Compare with AI to find missing fields
   ‚Ä¢ Save schemas for reuse across similar sites
    """)

def show_demo_scenarios():
    """Show example demo scenarios"""
    print_section("Demo Scenarios", "üí°")
    
    print("""
üöó DEMO SCENARIOS TO TRY:

1. CARS.COM LISTING:
   URL: https://www.cars.com/vehicledetail/detail/12345/
   ‚Ä¢ Perfect for testing all features
   ‚Ä¢ Rich structured data
   ‚Ä¢ Good for AI comparison

2. CARFAX LISTING:
   URL: https://www.carfax.com/vehicle/12345
   ‚Ä¢ Different DOM structure
   ‚Ä¢ Test mapping flexibility
   ‚Ä¢ Vehicle history data

3. AUTOTRADER LISTING:
   URL: https://www.autotrader.com/cars-for-sale/12345
   ‚Ä¢ Complex page layout
   ‚Ä¢ Multiple data sources
   ‚Ä¢ Advanced mapping challenge

4. CUSTOM DEALER WEBSITE:
   ‚Ä¢ Use any local dealer website
   ‚Ä¢ Test generic mapping capabilities
   ‚Ä¢ Create custom schemas

üéØ WORKFLOW DEMO:
   1. Load Cars.com URL
   2. Click "Get AI Suggestions" ‚Üí See automatic mapping
   3. Test mapping ‚Üí View goal.json preview
   4. Compare with AI ‚Üí See accuracy metrics
   5. Refine selectors manually
   6. Save as custom schema
   7. Test with different URLs
    """)

def open_browser():
    """Open the visual editor in browser"""
    print("üåê Opening Visual Editor in your default browser...")
    
    try:
        # Wait a moment for server to start
        print("   Waiting for server to initialize...")
        time.sleep(3)
        
        # Open the visual editor
        editor_url = "http://localhost:8000/mappingstudio/editor"
        webbrowser.open(editor_url)
        
        print(f"‚úÖ Browser opened to: {editor_url}")
        
        # Also show other useful URLs
        print(f"   üìö API Docs: http://localhost:8000/docs")
        print(f"   üîç Health Check: http://localhost:8000/health")
        
    except Exception as e:
        print(f"‚ùå Failed to open browser: {e}")
        print(f"   Please manually navigate to: http://localhost:8000/mappingstudio/editor")

def main():
    """Run the visual editor demo"""
    print("üé® RanomMappingStudio - Visual DOM-to-Goal Mapping Editor")
    print("=" * 80)
    
    print("""
üöÄ REVOLUTIONARY VISUAL MAPPING TOOL:
  ‚Ä¢ üñ±Ô∏è  Click-to-map DOM elements to goal.json fields
  ‚Ä¢ üß† AI-powered selector suggestions with confidence scores
  ‚Ä¢ üëÅÔ∏è  Real-time preview and live goal.json generation
  ‚Ä¢ ‚öîÔ∏è  AI vs mapping comparison with similarity metrics
  ‚Ä¢ üíæ Schema save/export with version control
  ‚Ä¢ üéØ Professional UI accessible to non-programmers
    """)
    
    # Check requirements
    if not check_system_requirements():
        print("\n‚ùå System requirements not met. Please fix the issues above.")
        return
    
    print("\n‚úÖ All requirements met! Ready to start.")
    
    # Show usage guide
    show_usage_instructions()
    show_demo_scenarios()
    
    print_section("Starting Demo", "üöÄ")
    
    # Confirm start
    try:
        input("\nPress Enter to start the Visual Editor server (or Ctrl+C to cancel)...")
    except KeyboardInterrupt:
        print("\n‚õî Demo cancelled by user")
        return
    
    # Open browser in background
    import threading
    browser_thread = threading.Thread(target=open_browser)
    browser_thread.daemon = True
    browser_thread.start()
    
    # Start server (this will block until Ctrl+C)
    start_api_server()
    
    print_section("Demo Complete", "‚ú®")
    print("""
üéâ Thank you for trying RanomMappingStudio Visual Editor!

Key achievements:
‚Ä¢ ‚úÖ Interactive visual mapping interface
‚Ä¢ ‚úÖ Real-time DOM element selection  
‚Ä¢ ‚úÖ AI-powered intelligent suggestions
‚Ä¢ ‚úÖ Live preview and comparison tools
‚Ä¢ ‚úÖ Professional production-ready UI
‚Ä¢ ‚úÖ Complete API integration

Next steps:
‚Ä¢ Use saved schemas in production
‚Ä¢ Integrate with your car listing workflow  
‚Ä¢ Build custom extensions and integrations
‚Ä¢ Share mappings with your team

For support and updates:
‚Ä¢ Documentation: README.md and docs/API.md
‚Ä¢ API Reference: http://localhost:8000/docs
‚Ä¢ Source code: mappingstudio/ directory
    """)

if __name__ == "__main__":
    main() 